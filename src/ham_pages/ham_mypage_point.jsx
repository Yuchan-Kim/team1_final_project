// src/ham_pages/ham_mypage_point.jsx

import React, { useState } from 'react';
import DatePicker from 'react-datepicker'; // ÎÇ†Ïßú ÏÑ†ÌÉùÍ∏∞ import
import 'react-datepicker/dist/react-datepicker.css';

// Header, Sidebar, Topbar Ïª¥Ìè¨ÎÑåÌä∏ import
import Header from './ham_common/ham_header';
import Sidebar from './ham_common/ham_sidebar';
import Topbar from './ham_common/ham_topbar';

//Í≥µÌÜµ Î¶¨ÏÖã & Ìè¨Ïù∏Ìä∏ ÌéòÏù¥ÏßÄ Ïä§ÌÉÄÏùº 
import '../ham_asset/css/ham_mypage_point.css';


const Pointpage = () => {
    // ÌÉ≠ Ï†ÑÌôò ÏÉÅÌÉúÍ∞í
    const [activeTab, setActiveTab] = useState('Ï†ÑÏ≤¥'); // Í∏∞Î≥∏ ÏÉÅÌÉúÎ°ú 'Ï†ÑÏ≤¥' ÏÑ§Ï†ï

    // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ Í¥ÄÎ†® ÏÉÅÌÉú
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);

    // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞ (ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞)
    const pointData = {
        Ï†ÑÏ≤¥: [
            { date: '7.30', description: 'Ï∂úÏÑùÏ≤¥ÌÅ¨ Î≥¥ÏÉÅ', change: '+ 100', total: '1,152' },
            { date: '7.30', description: 'Ï±åÎ¶∞ÏßÄ ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ', change: '+ 300', total: '902' },
            { date: '7.27', description: 'ÌîÑÎ°úÌïÑ Íµ¨Îß§', change: '- 5,999', total: '10,251' },
            // ... Îã§Î•∏ Ï†ÑÏ≤¥ ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞
        ],
        Ï†ÅÎ¶Ω: [
            { date: '7.30', description: 'Ï∂úÏÑùÏ≤¥ÌÅ¨ Î≥¥ÏÉÅ', change: '+ 100', total: '1,152' },
            { date: '7.30', description: 'Ï±åÎ¶∞ÏßÄ ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ', change: '+ 300', total: '902' },
            // ... Îã§Î•∏ Ï†ÅÎ¶Ω ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞
        ],
        ÏÇ¨Ïö©: [
            { date: '7.27', description: 'ÌîÑÎ°úÌïÑ Íµ¨Îß§', change: '- 5,999', total: '10,251' },
            // ... Îã§Î•∏ ÏÇ¨Ïö© ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞
        ],
    };

    // ÌÉ≠ Ï†ÑÌôò Ìï®Ïàò
    const handleTabChange = (tab) => {
        setActiveTab(tab);
    };

    // Ìè¨Ïù∏Ìä∏ Í≤ÄÏÉâ Ìï∏Îì§Îü¨ (ÏòàÏãú)
    const handleSearch = () => {
        // ÏÑ†ÌÉùÌïú Í∏∞Í∞ÑÏóê Îî∞Î•∏ Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ Ï∂îÍ∞Ä
        console.log('Í≤ÄÏÉâ Í∏∞Í∞Ñ:', startDate, endDate);
    };

    // Î°úÍ∑∏ÏïÑÏõÉ Ìï∏Îì§Îü¨ (ÏòàÏãú)
    const handleLogout = () => {
        // Î°úÍ∑∏ÏïÑÏõÉ Î°úÏßÅ Ï∂îÍ∞Ä
        console.log("Î°úÍ∑∏ÏïÑÏõÉ");
    };

    return (
        <div className="wrap">
            {/* Header Ïª¥Ìè¨ÎÑåÌä∏ */}
            <Header onLogout={handleLogout} />

            {/* Î©îÏù∏ Ïª®ÌÖåÏù¥ÎÑà */}
            <div className="hmk_main-container">
                {/* Sidebar Ïª¥Ìè¨ÎÑåÌä∏ */}
                <Sidebar />

                {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† ÏòÅÏó≠ */}
                <div className="hmk_main">
                    {/* Topbar Ïª¥Ìè¨ÎÑåÌä∏ */}
                    <Topbar />

                    {/* Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ ÌÖåÏù¥Î∏î */}
                    <div className="hmk_point-history">
                        <h2>Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠</h2>
                        <div className="hmk_point-summary">
                            <div className="hmk_point-box">
                                <p>Total Points</p>
                                <div className="hmk_point-value">1152</div>
                            </div>
                            <div className="hmk_point-box">
                                <p>Points Earned</p>
                                <div className="hmk_point-value">17550</div>
                            </div>
                            <div className="hmk_point-box">
                                <p>Points Spent</p>
                                <div className="hmk_point-value">15998</div>
                            </div>
                        </div>

                        <div className="hmk_point-filter">
                            <p>Í∏∞Í∞ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</p>
                            <div className="hmk_date-options">
                                <button className="hmk_date-button" onClick={() => {
                                    /* ÏµúÍ∑º 7Ïùº ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ */
                                    setStartDate(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000));
                                    setEndDate(new Date());
                                }}>ÏµúÍ∑º 7Ïùº</button>
                                <button className="hmk_date-button" onClick={() => {
                                    /* ÏµúÍ∑º 30Ïùº ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ */
                                    setStartDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
                                    setEndDate(new Date());
                                }}>ÏµúÍ∑º 30Ïùº</button>
                                <button className="hmk_date-button" onClick={() => {
                                    /* ÏµúÍ∑º 90Ïùº ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ */
                                    setStartDate(new Date(Date.now() - 90 * 24 * 60 * 60 * 1000));
                                    setEndDate(new Date());
                                }}>ÏµúÍ∑º 90Ïùº</button>
                            </div>
                            <div className="hmk_date-inputs">
                                <div className="hmk_date">
                                    <label htmlFor="start-date">ÏãúÏûëÏùº</label>
                                    <div className="hmk_date-wrapper">
                                        <DatePicker
                                            selected={startDate}
                                            onChange={date => setStartDate(date)}
                                            placeholderText="mm/dd/yyyy          üìÖ"
                                            className="hmk_date-input"
                                        />
                                        <span className="hmk_calendar-icon" onClick={() => { /* Ïó¥Í∏∞ Î°úÏßÅ */ }}></span>
                                    </div>
                                </div>
                                <div className="hmk_date">
                                    <label htmlFor="end-date">Ï¢ÖÎ£åÏùº</label>
                                    <div className="hmk_date-wrapper">
                                        <DatePicker
                                            selected={endDate}
                                            onChange={date => setEndDate(date)}
                                            placeholderText="mm/dd/yyyy          üìÖ"
                                            className="hmk_date-input"
                                        />
                                        <span className="hmk_calendar-icon" onClick={() => { /* Ïó¥Í∏∞ Î°úÏßÅ */ }}></span>
                                    </div>
                                </div>

                                <button className="hmk_search-button" onClick={handleSearch}>Í≤ÄÏÉâ</button>
                            </div>
                        </div>

                        {/* Ìè¨Ïù∏Ìä∏ ÌÜ†Í∏Ä Î≤ÑÌäº */}
                        <div className="hmk_toggle-container">
                            <button
                                className={`hmk_toggle-button ${activeTab === 'Ï†ÑÏ≤¥' ? 'active' : ''}`}
                                onClick={() => handleTabChange('Ï†ÑÏ≤¥')}
                            >
                                Ï†ÑÏ≤¥
                            </button>
                            <button
                                className={`hmk_toggle-button ${activeTab === 'Ï†ÅÎ¶Ω' ? 'active' : ''}`}
                                onClick={() => handleTabChange('Ï†ÅÎ¶Ω')}
                            >
                                Ï†ÅÎ¶Ω
                            </button>
                            <button
                                className={`hmk_toggle-button ${activeTab === 'ÏÇ¨Ïö©' ? 'active' : ''}`}
                                onClick={() => handleTabChange('ÏÇ¨Ïö©')}
                            >
                                ÏÇ¨Ïö©
                            </button>
                        </div>
                        {/* Ïó¨Í∏∞ÏóêÏÑú activeTabÏóê Îî∞Îùº Îã§Î•∏ ÌÖåÏù¥Î∏î ÎÇ¥Ïö© Î≥¥Ïó¨Ï£ºÍ∏∞ */}
                        <table className="hmk_point-table">
                            <thead>
                                <tr>
                                    <th>ÎÇ†Ïßú</th>
                                    <th>ÏÑ§Î™Ö</th>
                                    <th>Î≥ÄÎèô</th>
                                    <th>ÏûîÏï°</th>
                                </tr>
                            </thead>
                            <tbody>
                                {pointData[activeTab].map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.date}</td>
                                        <td>{item.description}</td>
                                        <td>{item.change}</td>
                                        <td>{item.total}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Pointpage;
